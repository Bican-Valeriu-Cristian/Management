@model IEnumerable<Management.Models.Task>

@{
    ViewData["Title"] = "Index";
}

<h1>Tasks </h1>

<p>
    <a asp-action="Create" class="btn btn-primary"><i class="fa fa-plus"></i>    Create New Tasks</a>
</p>
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Tasks List</h3>
    </div>
    <div class="card-body">
        <table id="example1" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.TaskNo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ToDo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Critical)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DateTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Status)
                    </th>
                    <th>
                        Edit
                    </th>
                    <th>
                        View
                    </th>
                    <th>
                        Delete
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.OrderBy(t => t.TaskNo))
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.TaskNo)</td>
                        <td>@Html.DisplayFor(modelItem => item.Name)</td>
                        <td>@Html.DisplayFor(modelItem => item.ToDo)</td>
                        <td>@Html.DisplayFor(modelItem => item.Critical)</td>
                        <td>@Html.DisplayFor(modelItem => item.DateTime)</td>
                        <td>
                            <form asp-action="ChangeStatus" asp-controller="Tasks" method="post" class="change-status-form" style="display:inline;">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@item.Id" />
                                <select name="status" class="form-select form-select-sm" style="width:auto;display:inline;">
                                    @foreach (var status in Enum.GetValues(typeof(Management.Models.TaskStatus)))
                                    {
                                        <option value="@status" selected="@(item.Status == (Management.Models.TaskStatus)status)">
                                            @status
                                        </option>
                                    }
                                </select>
                            </form>
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary"><i class="fa fa-pencil"></i> Edit</a>
                        </td>
                        <td>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-warning"><i class="fa fa-eye"></i> Details</a>
                        </td>
                        <td>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger"><i class="fa fa-trash"></i> Delete</a>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.change-status-form select').forEach(function (select) {
                select.addEventListener('change', function (e) {
                    var form = e.target.closest('form');
                    var formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => {
                        if (!response.ok) throw new Error('Network response was not ok');
                        // Optionally show a success message
                    })
                    .catch(error => {
                        alert('Error updating status');
                    });
                });
            });
        });
    </script>
}
